# generated by datamodel-codegen:
#   filename:  res.json
#   timestamp: 2022-07-01T10:08:19+00:00

from __future__ import annotations

from typing import Any

from pydantic import BaseModel, Field


class RisingEventLocation(BaseModel):
    id: str
    name: str
    __typename: str


class RisingEvent(BaseModel):
    id: str
    name: str
    start_date: str = Field(..., alias="startDate")
    image_url: str = Field(..., alias="imageUrl")
    slug: str
    available_tickets_count: int = Field(..., alias="availableTicketsCount")
    location: RisingEventLocation
    __typename: str


class PopularLocation(BaseModel):
    id: str
    slug: str
    image: str
    name: str
    background: str
    __typename: str


class NearbyEvents(BaseModel):
    rising_events: list[RisingEvent] | None = Field(None, alias="risingEvents")
    popular_locations: list[PopularLocation] | None = Field(
        None, alias="popularLocations"
    )
    __typename: str
    events_by_followed_artists: Any | None = Field(
        None, alias="eventsByFollowedArtists"
    )


class TestimonialsUser(BaseModel):
    id: str
    avatar: str
    firstname: str
    __typename: str


class TestimonialsEdgeNode(BaseModel):
    id: str
    rating: int
    user: TestimonialsUser
    description: str
    created_at: str = Field(..., alias="createdAt")
    __typename: str


class TestimonialsEdge(BaseModel):
    node: TestimonialsEdgeNode
    __typename: str


class TestimonialsPageInfo(BaseModel):
    has_next_page: bool = Field(..., alias="hasNextPage")
    end_cursor: str = Field(..., alias="endCursor")
    __typename: str


class Testimonials(BaseModel):
    edges: list[TestimonialsEdge]
    total_review_count: int = Field(..., alias="totalReviewCount")
    review_average: int = Field(..., alias="reviewAverage")
    page_info: TestimonialsPageInfo = Field(..., alias="pageInfo")
    __typename: str


class RandomUserAvatar(BaseModel):
    avatar: str
    __typename: str


class ExploreFeedNodeBlogPostAuthor(BaseModel):
    id: str
    firstname: str
    __typename: str


class ExploreFeedNodeBlogPost(BaseModel):
    id: str
    title: str
    subtitle: str
    image_url: str = Field(..., alias="imageUrl")
    body: str
    slug: str
    author: ExploreFeedNodeBlogPostAuthor
    created_at: str = Field(..., alias="createdAt")
    __typename: str


class ExploreFeedGroupItemEventArtist(BaseModel):
    id: str
    name: str
    slug: str
    avatar: str | None
    number_of_upcoming_events: int = Field(..., alias="numberOfUpcomingEvents")
    is_followed_by_viewer: bool = Field(..., alias="isFollowedByViewer")
    viewer_has_notifications_enabled: bool = Field(
        ..., alias="viewerHasNotificationsEnabled"
    )
    __typename: str


class ExploreFeedGroupItemEventCountry(BaseModel):
    name: str
    code: str
    __typename: str


class ExploreFeedGroupItemEventUri(BaseModel):
    path: str
    __typename: str


class ExploreFeedGroupItemEventCity(BaseModel):
    id: str
    name: str
    __typename: str


class ExploreFeedGroupItemEventLocation(BaseModel):
    id: str
    name: str
    city: ExploreFeedGroupItemEventCity
    __typename: str


class ExploreFeedGroupItemEvent(BaseModel):
    id: str
    slug: str
    name: str
    is_highlighted: bool = Field(..., alias="isHighlighted")
    image_url: str = Field(..., alias="imageUrl")
    category: str
    start_date: str = Field(..., alias="startDate")
    end_date: str | None = Field(..., alias="endDate")
    available_tickets_count: int = Field(..., alias="availableTicketsCount")
    status: str
    artists: list[ExploreFeedGroupItemEventArtist]
    country: ExploreFeedGroupItemEventCountry
    uri: ExploreFeedGroupItemEventUri
    location: ExploreFeedGroupItemEventLocation
    __typename: str


class ExploreFeedGroupItemEvents(BaseModel):
    node: ExploreFeedGroupItemEvent
    __typename: str


class ExploreFeedGroupItems(BaseModel):
    edges: list[ExploreFeedGroupItemEvents]
    __typename: str


class ExploreFeedGroup(BaseModel):
    id: str
    subtitle: str
    title: str
    image_background_url: Any = Field(..., alias="imageBackgroundUrl")
    image_thumbnail_url: str = Field(..., alias="imageThumbnailUrl")
    logo_url: Any = Field(..., alias="logoUrl")
    items: ExploreFeedGroupItems
    __typename: str


class ExploreFeedEvent(BaseModel):
    edges: list
    __typename: str


class ExploreFeedNode(BaseModel):
    id: str
    type: str
    status: str
    blog_post: ExploreFeedNodeBlogPost | None = Field(None, alias="blogPost")
    __typename: str
    title: str | None = None
    subtitle: str | None = None
    url: str | None = None
    image_url: str | None = Field(None, alias="imageUrl")
    group: ExploreFeedGroup | None = None
    number_of_events_on_feed_overview: int | None = Field(
        None, alias="numberOfEventsOnFeedOverview"
    )
    image_background_url: Any | None = Field(None, alias="imageBackgroundUrl")
    events: ExploreFeedEvent | None | None = None


class ExploreFeedEdge(BaseModel):
    node: ExploreFeedNode
    __typename: str


class ExploreFeed(BaseModel):
    edges: list[ExploreFeedEdge]
    __typename: str


class Explore(BaseModel):
    feed: ExploreFeed
    __typename: str


class TicketswapApiResponseNearbyEventData(BaseModel):
    nearby: NearbyEvents | None = NearbyEvents()
    testimonials: Testimonials | None = None
    random_user_avatars: list[RandomUserAvatar] | None = Field(
        None, alias="randomUserAvatars"
    )
    user_count: int | None = Field(None, alias="userCount")
    logged_in_user: Any | None = Field(None, alias="loggedInUser")
    explore: Explore | None = None


class TicketswapApiResponseNearbyEvent(BaseModel):
    data: TicketswapApiResponseNearbyEventData


class TicketswapApiResponseNearbyEvents(BaseModel):
    data: list[TicketswapApiResponseNearbyEvent]

    def get_explore_feed_event_ids(self) -> list[str]:
        ids: list[str] = []
        for response in self.data:
            try:
                for explore_feed_edge in response.data.explore.feed.edges:  # type: ignore
                    try:
                        for group_item in explore_feed_edge.node.group.items.edges:  # type: ignore
                            ids.append(group_item.node.id)
                    except AttributeError:
                        continue
            except AttributeError:
                continue

        return ids
