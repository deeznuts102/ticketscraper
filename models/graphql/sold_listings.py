# generated by datamodel-codegen:
#   filename:  sold_listings.json
#   timestamp: 2022-09-13T21:06:14+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field


class Uri(BaseModel):
    path: str


class City(BaseModel):
    id: str
    name: str


class Location(BaseModel):
    id: str
    name: str
    city: City


class Event(BaseModel):
    id: str
    name: str
    start_date: str = Field(..., alias='startDate')
    end_date: Any = Field(..., alias='endDate')
    slug: str
    status: str
    location: Location


class EventType(BaseModel):
    id: str
    title: str
    start_date: str = Field(..., alias='startDate')
    end_date: Any = Field(..., alias='endDate')


class Seller(BaseModel):
    id: str
    firstname: str
    avatar: str



class OriginalPrice(BaseModel):
    amount: int
    currency: str


class TotalPriceWithTransactionFee(BaseModel):
    amount: int
    currency: str


class SellerPrice(BaseModel):
    amount: int
    currency: str


class Price(BaseModel):
    original_price: OriginalPrice = Field(..., alias='originalPrice')
    total_price_with_transaction_fee: TotalPriceWithTransactionFee = Field(
        ..., alias='totalPriceWithTransactionFee'
    )
    seller_price: SellerPrice = Field(..., alias='sellerPrice')


class Node(BaseModel):
    id: str
    hash: str
    description: Optional[str]
    is_public: bool = Field(..., alias='isPublic')
    status: str
    date_range: Any = Field(..., alias='dateRange')
    uri: Uri
    event: Event
    event_type: EventType = Field(..., alias='eventType')
    seller: Seller
    number_of_tickets_in_listing: int = Field(..., alias='numberOfTicketsInListing')
    price: Price


class Edge(BaseModel):
    node: Node


class PageInfo(BaseModel):
    end_cursor: Optional[str] = Field(..., alias='endCursor')
    has_next_page: bool = Field(..., alias='hasNextPage')


class SoldListings(BaseModel):
    edges: List[Edge]
    page_info: PageInfo = Field(..., alias='pageInfo')


class SoldListingsResponse(BaseModel):
    """ SoldListings model return by the Ticketswap GraphQL API"""
    id: str
    slug: str
    title: str
    sold_listings: SoldListings = Field(..., alias='soldListings')
