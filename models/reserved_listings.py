# generated by datamodel-codegen:
#   filename:  reserved_listings.json
#   timestamp: 2022-07-06T20:35:59+00:00

from __future__ import annotations

from typing import Any

from pydantic import BaseModel, Field


class PageInfo(BaseModel):
    end_cursor: Any = Field(..., alias="endCursor")
    has_next_page: bool = Field(..., alias="hasNextPage")
    __typename: str


class ReservedListings(BaseModel):
    edges: list
    page_info: PageInfo = Field(..., alias="pageInfo")
    __typename: str


class Uri(BaseModel):
    path: str
    __typename: str


class City(BaseModel):
    id: str
    name: str
    __typename: str


class Location(BaseModel):
    id: str
    name: str
    city: City
    __typename: str


class Event1(BaseModel):
    id: str
    name: str
    start_date: str = Field(..., alias="startDate")
    end_date: str = Field(..., alias="endDate")
    slug: str
    status: str
    location: Location
    __typename: str


class EventType(BaseModel):
    id: str
    title: str
    start_date: str = Field(..., alias="startDate")
    end_date: str = Field(..., alias="endDate")
    __typename: str


class Seller(BaseModel):
    id: str
    firstname: str
    avatar: str
    __typename: str


class Node2(BaseModel):
    id: str
    status: str
    __typename: str


class Edge1(BaseModel):
    node: Node2
    __typename: str


class Tickets(BaseModel):
    edges: list[Edge1]
    __typename: str


class OriginalPrice(BaseModel):
    amount: int
    currency: str
    __typename: str


class TotalPriceWithTransactionFee(BaseModel):
    amount: int
    currency: str
    __typename: str


class SellerPrice(BaseModel):
    amount: int
    currency: str
    __typename: str


class Price(BaseModel):
    original_price: OriginalPrice = Field(..., alias="originalPrice")
    total_price_with_transaction_fee: TotalPriceWithTransactionFee = Field(
        ..., alias="totalPriceWithTransactionFee"
    )
    seller_price: SellerPrice = Field(..., alias="sellerPrice")
    __typename: str


class Node1(BaseModel):
    id: str
    hash: str
    description: Any
    is_public: bool = Field(..., alias="isPublic")
    status: str
    date_range: Any = Field(..., alias="dateRange")
    uri: Uri
    event: Event1
    event_type: EventType = Field(..., alias="eventType")
    seller: Seller
    tickets: Tickets
    number_of_tickets_in_listing: int = Field(..., alias="numberOfTicketsInListing")
    number_of_tickets_still_for_sale: int = Field(
        ..., alias="numberOfTicketsStillForSale"
    )
    price: Price
    __typename: str


class Edge(BaseModel):
    node: Node1
    __typename: str


class PageInfo1(BaseModel):
    end_cursor: str = Field(..., alias="endCursor")
    has_next_page: bool = Field(..., alias="hasNextPage")
    __typename: str


class SoldListings(BaseModel):
    edges: list[Edge]
    page_info: PageInfo1 = Field(..., alias="pageInfo")
    __typename: str


class Node(BaseModel):
    id: str
    slug: str
    title: str
    reserved_listings: ReservedListings | None = Field(None, alias="reservedListings")
    __typename: str
    sold_listings: SoldListings | None = Field(None, alias="soldListings")


class Data(BaseModel):
    node: Node


class EventItem(BaseModel):
    data: Data


class TicketswapApiResponseEvent(BaseModel):
    data: list[EventItem]

    def get_sold_tickets(self):
        tickets_sold = []
        for data in self.data:
            for edge in data.node.sold_listings.edges:
                ticket = {"description": edge.node.description}
                tickets_sold.append(ticket)

        return tickets_sold
